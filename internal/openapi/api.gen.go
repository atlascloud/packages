// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Architecture defines model for Architecture.
type Architecture string

// Distribution defines model for Distribution.
type Distribution string

// DistroVersion defines model for DistroVersion.
type DistroVersion string

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewRepo defines model for NewRepo.
type NewRepo struct {

	// Description of the repo to add - not functional - just for ease of use
	Description *string `json:"description,omitempty"`

	// Name of the repo to add
	Name string `json:"name"`
}

// Organization defines model for Organization.
type Organization struct {

	// name of the organization
	Name  *string `json:"name,omitempty"`
	Repos *Repo   `json:"repos,omitempty"`
}

// Package defines model for Package.
type Package struct {

	// name of the package
	Name    string  `json:"name"`
	Release *string `json:"release,omitempty"`
	Version *string `json:"version,omitempty"`
}

// Repo defines model for Repo.
type Repo struct {
	Architectures *Architecture `json:"architectures,omitempty"`

	// Description of the repo - not functional - just for ease of use
	Description *string `json:"description,omitempty"`

	// Name of the repo
	Name string `json:"name"`

	// computed from repo/version
	Repo string `json:"repo"`

	// the distro version the repo belongs to
	Version string `json:"version"`
}

// CreateRepoJSONBody defines parameters for CreateRepo.
type CreateRepoJSONBody NewRepo

// CreateRepoRequestBody defines body for CreateRepo for application/json ContentType.
type CreateRepoJSONRequestBody CreateRepoJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListDistros request
	ListDistros(ctx context.Context) (*http.Response, error)

	// ListDistroVersions request
	ListDistroVersions(ctx context.Context, distro string) (*http.Response, error)

	// GetHealthPing request
	GetHealthPing(ctx context.Context) (*http.Response, error)

	// GetHealthReady request
	GetHealthReady(ctx context.Context) (*http.Response, error)

	// HeadHealthReady request
	HeadHealthReady(ctx context.Context) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, org string) (*http.Response, error)

	// CreateRepo request  with any body
	CreateRepoWithBody(ctx context.Context, org string, contentType string, body io.Reader) (*http.Response, error)

	CreateRepo(ctx context.Context, org string, body CreateRepoJSONRequestBody) (*http.Response, error)

	// ListRepos request
	ListRepos(ctx context.Context, org string) (*http.Response, error)

	// FindRepoByName request
	FindRepoByName(ctx context.Context, org string, repo string) (*http.Response, error)

	// ListVersions request
	ListVersions(ctx context.Context, org string, repo string) (*http.Response, error)

	// ListPackagesByRepo request
	ListPackagesByRepo(ctx context.Context, org string, repo string, ver string) (*http.Response, error)

	// CreatePackage request  with any body
	CreatePackageWithBody(ctx context.Context, org string, repo string, ver string, contentType string, body io.Reader) (*http.Response, error)
}

func (c *Client) ListDistros(ctx context.Context) (*http.Response, error) {
	req, err := NewListDistrosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListDistroVersions(ctx context.Context, distro string) (*http.Response, error) {
	req, err := NewListDistroVersionsRequest(c.Server, distro)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealthPing(ctx context.Context) (*http.Response, error) {
	req, err := NewGetHealthPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealthReady(ctx context.Context) (*http.Response, error) {
	req, err := NewGetHealthReadyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) HeadHealthReady(ctx context.Context) (*http.Response, error) {
	req, err := NewHeadHealthReadyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, org string) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, org)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepoWithBody(ctx context.Context, org string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateRepoRequestWithBody(c.Server, org, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepo(ctx context.Context, org string, body CreateRepoJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateRepoRequest(c.Server, org, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListRepos(ctx context.Context, org string) (*http.Response, error) {
	req, err := NewListReposRequest(c.Server, org)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) FindRepoByName(ctx context.Context, org string, repo string) (*http.Response, error) {
	req, err := NewFindRepoByNameRequest(c.Server, org, repo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListVersions(ctx context.Context, org string, repo string) (*http.Response, error) {
	req, err := NewListVersionsRequest(c.Server, org, repo)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListPackagesByRepo(ctx context.Context, org string, repo string, ver string) (*http.Response, error) {
	req, err := NewListPackagesByRepoRequest(c.Server, org, repo, ver)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePackageWithBody(ctx context.Context, org string, repo string, ver string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreatePackageRequestWithBody(c.Server, org, repo, ver, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewListDistrosRequest generates requests for ListDistros
func NewListDistrosRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/distributions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDistroVersionsRequest generates requests for ListDistroVersions
func NewListDistroVersionsRequest(server string, distro string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "distro", distro)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/distributions/%s/versions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthPingRequest generates requests for GetHealthPing
func NewGetHealthPingRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/health/ping")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthReadyRequest generates requests for GetHealthReady
func NewGetHealthReadyRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/health/ready")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadHealthReadyRequest generates requests for HeadHealthReady
func NewHeadHealthReadyRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/health/ready")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, org string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "org", org)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRepoRequest calls the generic CreateRepo builder with application/json body
func NewCreateRepoRequest(server string, org string, body CreateRepoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRepoRequestWithBody(server, org, "application/json", bodyReader)
}

// NewCreateRepoRequestWithBody generates requests for CreateRepo with any type of body
func NewCreateRepoRequestWithBody(server string, org string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "org", org)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListReposRequest generates requests for ListRepos
func NewListReposRequest(server string, org string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "org", org)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o/%s/r", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindRepoByNameRequest generates requests for FindRepoByName
func NewFindRepoByNameRequest(server string, org string, repo string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "org", org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "repo", repo)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o/%s/r/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListVersionsRequest generates requests for ListVersions
func NewListVersionsRequest(server string, org string, repo string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "org", org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "repo", repo)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o/%s/r/%s/v", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPackagesByRepoRequest generates requests for ListPackagesByRepo
func NewListPackagesByRepoRequest(server string, org string, repo string, ver string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "org", org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "repo", repo)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "ver", ver)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o/%s/r/%s/v/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePackageRequestWithBody generates requests for CreatePackage with any type of body
func NewCreatePackageRequestWithBody(server string, org string, repo string, ver string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "org", org)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "repo", repo)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "ver", ver)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/o/%s/r/%s/v/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListDistros request
	ListDistrosWithResponse(ctx context.Context) (*ListDistrosResponse, error)

	// ListDistroVersions request
	ListDistroVersionsWithResponse(ctx context.Context, distro string) (*ListDistroVersionsResponse, error)

	// GetHealthPing request
	GetHealthPingWithResponse(ctx context.Context) (*GetHealthPingResponse, error)

	// GetHealthReady request
	GetHealthReadyWithResponse(ctx context.Context) (*GetHealthReadyResponse, error)

	// HeadHealthReady request
	HeadHealthReadyWithResponse(ctx context.Context) (*HeadHealthReadyResponse, error)

	// ListOrganizations request
	ListOrganizationsWithResponse(ctx context.Context) (*ListOrganizationsResponse, error)

	// GetOrganization request
	GetOrganizationWithResponse(ctx context.Context, org string) (*GetOrganizationResponse, error)

	// CreateRepo request  with any body
	CreateRepoWithBodyWithResponse(ctx context.Context, org string, contentType string, body io.Reader) (*CreateRepoResponse, error)

	CreateRepoWithResponse(ctx context.Context, org string, body CreateRepoJSONRequestBody) (*CreateRepoResponse, error)

	// ListRepos request
	ListReposWithResponse(ctx context.Context, org string) (*ListReposResponse, error)

	// FindRepoByName request
	FindRepoByNameWithResponse(ctx context.Context, org string, repo string) (*FindRepoByNameResponse, error)

	// ListVersions request
	ListVersionsWithResponse(ctx context.Context, org string, repo string) (*ListVersionsResponse, error)

	// ListPackagesByRepo request
	ListPackagesByRepoWithResponse(ctx context.Context, org string, repo string, ver string) (*ListPackagesByRepoResponse, error)

	// CreatePackage request  with any body
	CreatePackageWithBodyWithResponse(ctx context.Context, org string, repo string, ver string, contentType string, body io.Reader) (*CreatePackageResponse, error)
}

type ListDistrosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Distribution
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListDistrosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDistrosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDistroVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DistroVersion
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListDistroVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDistroVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthReadyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthReadyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthReadyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadHealthReadyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadHealthReadyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadHealthReadyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Organization
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Repo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListReposResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Repo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListReposResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListReposResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindRepoByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Repo
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r FindRepoByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindRepoByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DistroVersion
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPackagesByRepoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Package
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r ListPackagesByRepoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPackagesByRepoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Package
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreatePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListDistrosWithResponse request returning *ListDistrosResponse
func (c *ClientWithResponses) ListDistrosWithResponse(ctx context.Context) (*ListDistrosResponse, error) {
	rsp, err := c.ListDistros(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListDistrosResponse(rsp)
}

// ListDistroVersionsWithResponse request returning *ListDistroVersionsResponse
func (c *ClientWithResponses) ListDistroVersionsWithResponse(ctx context.Context, distro string) (*ListDistroVersionsResponse, error) {
	rsp, err := c.ListDistroVersions(ctx, distro)
	if err != nil {
		return nil, err
	}
	return ParseListDistroVersionsResponse(rsp)
}

// GetHealthPingWithResponse request returning *GetHealthPingResponse
func (c *ClientWithResponses) GetHealthPingWithResponse(ctx context.Context) (*GetHealthPingResponse, error) {
	rsp, err := c.GetHealthPing(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthPingResponse(rsp)
}

// GetHealthReadyWithResponse request returning *GetHealthReadyResponse
func (c *ClientWithResponses) GetHealthReadyWithResponse(ctx context.Context) (*GetHealthReadyResponse, error) {
	rsp, err := c.GetHealthReady(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthReadyResponse(rsp)
}

// HeadHealthReadyWithResponse request returning *HeadHealthReadyResponse
func (c *ClientWithResponses) HeadHealthReadyWithResponse(ctx context.Context) (*HeadHealthReadyResponse, error) {
	rsp, err := c.HeadHealthReady(ctx)
	if err != nil {
		return nil, err
	}
	return ParseHeadHealthReadyResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, org string) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, org)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// CreateRepoWithBodyWithResponse request with arbitrary body returning *CreateRepoResponse
func (c *ClientWithResponses) CreateRepoWithBodyWithResponse(ctx context.Context, org string, contentType string, body io.Reader) (*CreateRepoResponse, error) {
	rsp, err := c.CreateRepoWithBody(ctx, org, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepoResponse(rsp)
}

func (c *ClientWithResponses) CreateRepoWithResponse(ctx context.Context, org string, body CreateRepoJSONRequestBody) (*CreateRepoResponse, error) {
	rsp, err := c.CreateRepo(ctx, org, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepoResponse(rsp)
}

// ListReposWithResponse request returning *ListReposResponse
func (c *ClientWithResponses) ListReposWithResponse(ctx context.Context, org string) (*ListReposResponse, error) {
	rsp, err := c.ListRepos(ctx, org)
	if err != nil {
		return nil, err
	}
	return ParseListReposResponse(rsp)
}

// FindRepoByNameWithResponse request returning *FindRepoByNameResponse
func (c *ClientWithResponses) FindRepoByNameWithResponse(ctx context.Context, org string, repo string) (*FindRepoByNameResponse, error) {
	rsp, err := c.FindRepoByName(ctx, org, repo)
	if err != nil {
		return nil, err
	}
	return ParseFindRepoByNameResponse(rsp)
}

// ListVersionsWithResponse request returning *ListVersionsResponse
func (c *ClientWithResponses) ListVersionsWithResponse(ctx context.Context, org string, repo string) (*ListVersionsResponse, error) {
	rsp, err := c.ListVersions(ctx, org, repo)
	if err != nil {
		return nil, err
	}
	return ParseListVersionsResponse(rsp)
}

// ListPackagesByRepoWithResponse request returning *ListPackagesByRepoResponse
func (c *ClientWithResponses) ListPackagesByRepoWithResponse(ctx context.Context, org string, repo string, ver string) (*ListPackagesByRepoResponse, error) {
	rsp, err := c.ListPackagesByRepo(ctx, org, repo, ver)
	if err != nil {
		return nil, err
	}
	return ParseListPackagesByRepoResponse(rsp)
}

// CreatePackageWithBodyWithResponse request with arbitrary body returning *CreatePackageResponse
func (c *ClientWithResponses) CreatePackageWithBodyWithResponse(ctx context.Context, org string, repo string, ver string, contentType string, body io.Reader) (*CreatePackageResponse, error) {
	rsp, err := c.CreatePackageWithBody(ctx, org, repo, ver, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreatePackageResponse(rsp)
}

// ParseListDistrosResponse parses an HTTP response from a ListDistrosWithResponse call
func ParseListDistrosResponse(rsp *http.Response) (*ListDistrosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDistrosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Distribution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListDistroVersionsResponse parses an HTTP response from a ListDistroVersionsWithResponse call
func ParseListDistroVersionsResponse(rsp *http.Response) (*ListDistroVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListDistroVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DistroVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetHealthPingResponse parses an HTTP response from a GetHealthPingWithResponse call
func ParseGetHealthPingResponse(rsp *http.Response) (*GetHealthPingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetHealthPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetHealthReadyResponse parses an HTTP response from a GetHealthReadyWithResponse call
func ParseGetHealthReadyResponse(rsp *http.Response) (*GetHealthReadyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetHealthReadyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseHeadHealthReadyResponse parses an HTTP response from a HeadHealthReadyWithResponse call
func ParseHeadHealthReadyResponse(rsp *http.Response) (*HeadHealthReadyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &HeadHealthReadyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRepoResponse parses an HTTP response from a CreateRepoWithResponse call
func ParseCreateRepoResponse(rsp *http.Response) (*CreateRepoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListReposResponse parses an HTTP response from a ListReposWithResponse call
func ParseListReposResponse(rsp *http.Response) (*ListReposResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListReposResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFindRepoByNameResponse parses an HTTP response from a FindRepoByNameWithResponse call
func ParseFindRepoByNameResponse(rsp *http.Response) (*FindRepoByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindRepoByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Repo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListVersionsResponse parses an HTTP response from a ListVersionsWithResponse call
func ParseListVersionsResponse(rsp *http.Response) (*ListVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DistroVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListPackagesByRepoResponse parses an HTTP response from a ListPackagesByRepoWithResponse call
func ParseListPackagesByRepoResponse(rsp *http.Response) (*ListPackagesByRepoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListPackagesByRepoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePackageResponse parses an HTTP response from a CreatePackageWithResponse call
func ParseCreatePackageResponse(rsp *http.Response) (*CreatePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Package
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /distributions)
	ListDistros(ctx echo.Context) error

	// (GET /distributions/{distro}/versions)
	ListDistroVersions(ctx echo.Context, distro string) error

	// (GET /health/ping)
	GetHealthPing(ctx echo.Context) error

	// (GET /health/ready)
	GetHealthReady(ctx echo.Context) error

	// (HEAD /health/ready)
	HeadHealthReady(ctx echo.Context) error

	// (GET /o)
	ListOrganizations(ctx echo.Context) error

	// (GET /o/{org})
	GetOrganization(ctx echo.Context, org string) error

	// (POST /o/{org})
	CreateRepo(ctx echo.Context, org string) error

	// (GET /o/{org}/r)
	ListRepos(ctx echo.Context, org string) error

	// (GET /o/{org}/r/{repo})
	FindRepoByName(ctx echo.Context, org string, repo string) error

	// (GET /o/{org}/r/{repo}/v)
	ListVersions(ctx echo.Context, org string, repo string) error

	// (GET /o/{org}/r/{repo}/v/{ver})
	ListPackagesByRepo(ctx echo.Context, org string, repo string, ver string) error

	// (POST /o/{org}/r/{repo}/v/{ver})
	CreatePackage(ctx echo.Context, org string, repo string, ver string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListDistros converts echo context to params.
func (w *ServerInterfaceWrapper) ListDistros(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDistros(ctx)
	return err
}

// ListDistroVersions converts echo context to params.
func (w *ServerInterfaceWrapper) ListDistroVersions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distro" -------------
	var distro string

	err = runtime.BindStyledParameter("simple", false, "distro", ctx.Param("distro"), &distro)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distro: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDistroVersions(ctx, distro)
	return err
}

// GetHealthPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealthPing(ctx)
	return err
}

// GetHealthReady converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetHealthReady(ctx)
	return err
}

// HeadHealthReady converts echo context to params.
func (w *ServerInterfaceWrapper) HeadHealthReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HeadHealthReady(ctx)
	return err
}

// ListOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) ListOrganizations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListOrganizations(ctx)
	return err
}

// GetOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameter("simple", false, "org", ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrganization(ctx, org)
	return err
}

// CreateRepo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameter("simple", false, "org", ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRepo(ctx, org)
	return err
}

// ListRepos converts echo context to params.
func (w *ServerInterfaceWrapper) ListRepos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameter("simple", false, "org", ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRepos(ctx, org)
	return err
}

// FindRepoByName converts echo context to params.
func (w *ServerInterfaceWrapper) FindRepoByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameter("simple", false, "org", ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "repo" -------------
	var repo string

	err = runtime.BindStyledParameter("simple", false, "repo", ctx.Param("repo"), &repo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindRepoByName(ctx, org, repo)
	return err
}

// ListVersions converts echo context to params.
func (w *ServerInterfaceWrapper) ListVersions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameter("simple", false, "org", ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "repo" -------------
	var repo string

	err = runtime.BindStyledParameter("simple", false, "repo", ctx.Param("repo"), &repo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListVersions(ctx, org, repo)
	return err
}

// ListPackagesByRepo converts echo context to params.
func (w *ServerInterfaceWrapper) ListPackagesByRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameter("simple", false, "org", ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "repo" -------------
	var repo string

	err = runtime.BindStyledParameter("simple", false, "repo", ctx.Param("repo"), &repo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo: %s", err))
	}

	// ------------- Path parameter "ver" -------------
	var ver string

	err = runtime.BindStyledParameter("simple", false, "ver", ctx.Param("ver"), &ver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ver: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPackagesByRepo(ctx, org, repo, ver)
	return err
}

// CreatePackage converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org" -------------
	var org string

	err = runtime.BindStyledParameter("simple", false, "org", ctx.Param("org"), &org)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org: %s", err))
	}

	// ------------- Path parameter "repo" -------------
	var repo string

	err = runtime.BindStyledParameter("simple", false, "repo", ctx.Param("repo"), &repo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repo: %s", err))
	}

	// ------------- Path parameter "ver" -------------
	var ver string

	err = runtime.BindStyledParameter("simple", false, "ver", ctx.Param("ver"), &ver)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ver: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePackage(ctx, org, repo, ver)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/distributions", wrapper.ListDistros)
	router.GET(baseURL+"/distributions/:distro/versions", wrapper.ListDistroVersions)
	router.GET(baseURL+"/health/ping", wrapper.GetHealthPing)
	router.GET(baseURL+"/health/ready", wrapper.GetHealthReady)
	router.HEAD(baseURL+"/health/ready", wrapper.HeadHealthReady)
	router.GET(baseURL+"/o", wrapper.ListOrganizations)
	router.GET(baseURL+"/o/:org", wrapper.GetOrganization)
	router.POST(baseURL+"/o/:org", wrapper.CreateRepo)
	router.GET(baseURL+"/o/:org/r", wrapper.ListRepos)
	router.GET(baseURL+"/o/:org/r/:repo", wrapper.FindRepoByName)
	router.GET(baseURL+"/o/:org/r/:repo/v", wrapper.ListVersions)
	router.GET(baseURL+"/o/:org/r/:repo/v/:ver", wrapper.ListPackagesByRepo)
	router.POST(baseURL+"/o/:org/r/:repo/v/:ver", wrapper.CreatePackage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RZXW/bOg/+K4Le9+IcII2z7qbw1ck+zlZg6IoM2M3QC8VmYq22pEl00yzwfz+QZMd2",
	"7NTpsK0udufEFPmQfEiJ1o5GMlNSgEBDwx01UQIZc49zHSUcIcJcg/2NWwU0pAY1F2taTOgbbp+XOXIp",
	"jgvIz6DNMYm3Wktt3ygtFWjk4ExHMnYmV1JnDGlIucCX53RSKeACYQ3aasjAGLbuA1hMqIZvOdcQ0/CL",
	"11nL3+yVyeVXiNDquoLNApTs4onBRJqrytHWT/qm/kXkimACRIOSBCVhcUzOiJBIVrmIrARLyRn5mhsk",
	"K6kJMAN2TW6gdq6OjmAZdO1dsQx6DHUVHATAaetz+6NeM8G/s8q9tu/9IEQDhGyu73HDgnSq/q9hRUP6",
	"v6DmXFASLnCBt5A78K5ZdFtm+LHIVLm0F1Rqo9/LyrujjD01pP00Yo2KGgxIq/yKyY9x8JeT71i+uyut",
	"izlCTFZaZm5tUMV58mAK2mqs4dj1FVLK1N4uIZVibQjK04qhhFpb66aymFADUa45bj/ZxPi8LYFp0PMc",
	"k33PtIv837XtBFHRwurgYiV9YxPIIrSPkDGe0pCWHDX/MEyZiVKZx9P77XdaZYDebsyLaSSzis0EgWV0",
	"QnOdljZMGASVmumBmkPm0Pn1pUt/R20Zi5RHIHxhlADmikUJkPPpjNpoaBstGn7ZnYYgYIrT4uYQ72az",
	"mTKneCr1OiitmuDD5eu3V5/enp1PZ9MEs9Q6gKAz83H1CfQdj6Ch5MASSmODzzG1QmXfILYWyfz6spHn",
	"kL6YzqYzq1sqEBZhSF+6vyZUMUxcloO4scG5f9aAXUam3KAtCZMrJbVleGsd+SvKtQaB6dbX3jxVXMDf",
	"1NnWrmtexjSkH7hBv2Max0yjpI2INXg+m1XsAeEgMKVSHrnFwVfjC8V3DvvEEbLBBtPavuvGy7RmW8/a",
	"tp/taLjXK5an+ChkDwHyh4Eey7mAewWRDS1UMsXkID/BzreFomorwxlr9xHzQEY+1yKKaZYBVjXQ7U7N",
	"DaiJ0O7TqZS3JFdNk1y4JoBJXfEeF212LNQ5TBpxPOxuN7+NMfvz3AmU2bs5BrYkwFJMAmUDVjOjnfF3",
	"gO+d2LWVGowpwj0GKmX8ADfcs0y5JqSk03OYrg5oi4o44TZaDSzeDsNdOLGfgFeXigYBO0EitT1g+PcJ",
	"sLgL8T2weCwYbVzlYFdoHmf7e8LHA4lfX3mtI/oJhdf2YQzVJ4Od1OviaPTtCYmwpcyRMDGQg3fQSsFj",
	"m/LBvNLTgKVej6/7HuHA/qTaRwLiDp7unZKmJ+yvNTAEImBTnf/aofbvF/7VGKL8LQeDr6Rvij+FytXU",
	"3xPBRWu8biMtfkfOPbDhevcj9ojqPNBHK30BmGtBGKkabnMAMRyl5mDciOIbQW8LXjiH/4zCf8YkCHYW",
	"VDHABePHd7cFuK8DrL8Z/ctFbIPxanvlx/cnzv7k2Len6rPcCjBK+m2VDj5jqpEKzigpF9wNHvQenPt+",
	"dOJ7Apa5odL2y+oLzHNi3POeKbusC3Z3oIcbXmf3M2TJDMRECp/XB8lZftoyr7bjOJk9GUU7hqtvwo+3",
	"fee+3I6sOqq7jxPqYs+j0bTlgZmD7Q9+XBzb8b3o9f4aZ2w8dxz7A3h+bOrK8hS5YhqDldTZWcyQtcl0",
	"/AKs9+ZN1Xd9+7vfJRdMb3tvdAZH4P2VyRPOcI+v4dGUcH355cqtee315aa4KbxE34VQGASpjFiaSIPh",
	"xcXFRXkNVPwXAAD///FAa2ZxIAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
